import threading

class GerenciadorConexaoBancoDados:
    _instancia = None
    _trava = threading.Lock()

    def __new__(cls): # SIMULANDO CONEXÃO
        if cls._instancia is None:
            with cls._trava:
                if cls._instancia is None:
                    cls._instancia = super().__new__(cls)
                    cls._instancia.conexao = "Conexão com o banco de dados estabelecida"
        return cls._instancia

    def obter_conexao(self):
        return self.conexao #INF CONEXÃO SUCEDIDA

class ThreadAcessoBancoDados(threading.Thread):
    def run(self):
        conexao_bd = GerenciadorConexaoBancoDados().obter_conexao()
        print(f"Thread {self.name}: Conexão obtida com sucesso: {conexao_bd}")

def principal(): # 5 THREADS PARA ACESSAR BD
    threads = []
    for i in range(5):
        thread = ThreadAcessoBancoDados(name=f"Thread-{i+1}")
        threads.append(thread)
        thread.start()

    for thread in threads: # TERMINANDO ACESSO AO BD
        thread.join()



if __name__ == "__main__":
    principal()
