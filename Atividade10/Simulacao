import threading

class DatabaseConnectionManager:
    _instance = None
    _lock = threading.Lock()

    def __new__(cls):
        if cls._instance is None:
            with cls._lock:
                if cls._instance is None:
                    cls._instance = super().__new__(cls)
                    # SIMULA CONEXÃO
                    cls._instance.connection = "Conexão com o banco de dados estabelecida"
        return cls._instance

    def get_connection(self):
        return self.connection

class DatabaseAccessThread(threading.Thread):
    def run(self):
        db_connection = DatabaseConnectionManager().get_connection()
        print(f"Thread {self.name}: Conexão obtida com sucesso: {db_connection}")

def main(): #5 THREADS PARA ACESSAR BD
    threads = []
    for i in range(5):
        thread = DatabaseAccessThread(name=f"Thread-{i+1}")
        threads.append(thread)
        thread.start()

    for thread in threads: #TEMINANDO ACESSO AO BD
        thread.join()



if __name__ == "__main__":
    main()
