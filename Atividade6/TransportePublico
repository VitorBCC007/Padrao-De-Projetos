from abc import ABC, abstractmethod

# Abstract Factory
class TransporteationFactory(ABC):
    @abstractmethod
    def create_Transporte(self):
        pass

class BusFactory(TransporteationFactory):
    def create_Transporte(self): 
        return onibus()

class SubwayFactory(TransporteationFactory):
    def create_Transporte(self):
        return metro()

class Transporte(ABC):
    @abstractmethod
    def set_capacidade_veiculo(self, capacidade_veiculo):
        pass
    
    @abstractmethod
    def set_pagamento(self, pagamento):
        pass
    
    @abstractmethod
    def set_rota(self, origin, destino):
        pass
    
    @abstractmethod
    def gestao_passageiros(self, embarked, disembarked):
        pass
    
    @abstractmethod
    def monitor_capacidade_veiculo(self):
        pass

class onibus(Transporte):#PRODUTO CONRETO
    def __init__(self):
        self.capacidade_veiculo = 0
        self.pagamento = ""
        self.origin = ""
        self.destino = ""
        self.capacidade_passageiros = 0  

    def set_capacidade_veiculo(self, capacidade_veiculo):
        self.capacidade_veiculo = capacidade_veiculo
    
    def set_pagamento(self, pagamento):
        self.pagamento = pagamento
    
    def set_rota(self, origin, destino):
        self.origin = origin
        self.destino = destino
    
    def gestao_passageiros(self, embarked, disembarked):
        self.capacidade_passageiros += embarked
        self.capacidade_passageiros -= disembarked
    
    def monitor_capacidade_veiculo(self):
        print("onibus capacidade_veiculo:", self.capacidade_veiculo)
        print("Current passengers:", self.capacidade_passageiros)

class metro(Transporte):
    def __init__(self):
        self.capacidade_veiculo = 0
        self.origin_station = ""
        self.destino_station = ""
        self.capacidade_passageiros = 0  
    
    def set_capacidade_veiculo(self, capacidade_veiculo):
        self.capacidade_veiculo = capacidade_veiculo
    
    def set_pagamento(self, pagamento):
        pass  
    
    def set_rota(self, origin_station, destino_station):
        self.origin_station = origin_station
        self.destino_station = destino_station
    
    def gestao_passageiros(self, embarked, disembarked):
        self.capacidade_passageiros += embarked
        self.capacidade_passageiros -= disembarked
    
    def monitor_capacidade_veiculo(self):
        print("metro capacidade_veiculo:", self.capacidade_veiculo)
        print("Current passengers:", self.capacidade_passageiros)

if __name__ == "__main__":
    onibus_factory = BusFactory()  
    onibus = onibus_factory.create_Transporte()  # (((FACTORY CRIANDO OBJETO onibus)))
    onibus.set_capacidade_veiculo(50)  
    onibus.set_pagamento("Card")  
    onibus.set_rota("Station A", "Station B")  
    onibus.gestao_passageiros(20, 10)  
    onibus.monitor_capacidade_veiculo()  

    metro_factory = SubwayFactory()  
    metro = metro_factory.create_Transporte()  # (((FACTORY CRIA metro)))
    metro.set_capacidade_veiculo(200)  
    metro.set_rota("Station X", "Station Y")  
    metro.gestao_passageiros(100, 50)  
    metro.monitor_capacidade_veiculo()  
