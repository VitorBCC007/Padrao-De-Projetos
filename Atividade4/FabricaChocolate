from abc import ABC, abstractmethod

class EggProduct(ABC):
    @abstractmethod
    def display_info(self):
        pass

class ChocolateFactory(ABC):
    @abstractmethod
    def create_product(self, code):
        pass

class ChocolateProduct(EggProduct):
    def __init__(self, name, description, weight, price, ingredients):
        self.name = name
        self.description = description
        self.weight = weight
        self.price = price
        self.ingredients = ingredients

    def display_info(self):
        return f"Nome: {self.name}\nDescrição: {self.description}\nPeso: {self.weight}g\nPreço: R${self.price}\nIngredientes: {', '.join(self.ingredients)}"

class NestleFactory(ChocolateFactory):
    def create_product(self, code):
        products = {
            1: ChocolateProduct("Alpino", "Chocolate ao leite, recheio de trufa, decorado com pedaços de amêndoas e avelãs.", 337, 30.99, ["Chocolate ao leite", "Trufa", "Amêndoas", "Avelãs"]),
            2: ChocolateProduct("Classic", "Chocolate ao leite, casca lisa e brilhante, acompanha bombons sortidos.", 185, 25.99, ["Chocolate ao leite", "Bombons sortidos"]),
            3: ChocolateProduct("Kit Kat", "Chocolate ao leite, casca recheada com wafer Kit Kat, acompanha barras de Kit Kat.", 227, 28.99, ["Chocolate ao leite", "Wafer Kit Kat"]),
            4: ChocolateProduct("Bis", "Chocolate ao leite, recheio cremoso de creme de avelã, decorado com pedaços de chocolate Bis.", 250, 26.99, ["Chocolate ao leite", "Creme de avelã", "Chocolate Bis"])
        }
        return products.get(code, None)

class GarotoFactory(ChocolateFactory):
    def create_product(self, code):
        products = {
            1: ChocolateProduct("Crocante", "Chocolate ao leite, recheio crocante de castanha de caju.", 215, 27.99, ["Chocolate ao leite", "Castanha de caju"]),
            2: ChocolateProduct("Talento", "Chocolate ao leite, recheio cremoso de trufa, acompanha barras de chocolate Talento.", 350, 35.99, ["Chocolate ao leite", "Trufa", "Chocolate Talento"]),
            3: ChocolateProduct("Baton", "Chocolate ao leite, casca fina, formato de bastão.", 172, 20.99, ["Chocolate ao leite"]),
            4: ChocolateProduct("Caribe", "Chocolate ao leite, recheio cremoso de coco, decorado com flocos de coco.", 200, 22.99, ["Chocolate ao leite", "Coco"])
        }
        return products.get(code, None)

class LactaFactory(ChocolateFactory):
    def create_product(self, code):
        products = {
            1: ChocolateProduct("A Leite", "Chocolate ao leite, casca com detalhes em chocolate branco.", 170, 23.99, ["Chocolate ao leite", "Chocolate branco"]),
            2: ChocolateProduct("Oreo", "Chocolate ao leite, recheio cremoso de biscoitos Oreo.", 257, 31.99, ["Chocolate ao leite", "Biscoitos Oreo"]),
            3: ChocolateProduct("Sonho de Valsa", "Chocolate ao leite, recheio de bombons Sonho de Valsa.", 277, 34.99, ["Chocolate ao leite", "Bombons Sonho de Valsa"]),
            4: ChocolateProduct("Ouro Branco", "Chocolate ao leite, recheio cremoso de chocolate branco, decorado com pedaços de chocolate Ouro Branco.", 240, 29.99, ["Chocolate ao leite", "Chocolate branco", "Chocolate Ouro Branco"])
        }
        return products.get(code, None)

class HersheysFactory(ChocolateFactory):
    def create_product(self, code):
        products = {
            1: ChocolateProduct("Hershey's", "Chocolate ao leite.", 137, 18.99, ["Chocolate ao leite"]),
            2: ChocolateProduct("Hershey's", "Chocolate ao leite.", 225, 24.99, ["Chocolate ao leite"]),
            3: ChocolateProduct("Hershey's", "Chocolate ao leite.", 336, 31.99, ["Chocolate ao leite"])
        }
        return products.get(code, None)

class FerreiroFactory(ChocolateFactory):
    def create_product(self, code):
        products = {
            1: ChocolateProduct("Ferreiro Rocher", "Chocolate com avelãs inteiras.", 137, 19.99, ["Chocolate", "Avelãs"]),
            2: ChocolateProduct("Ferreiro Rocher", "Chocolate com avelãs inteiras.", 255, 29.99, ["Chocolate", "Avelãs"]),
            3: ChocolateProduct("Ferreiro Rocher", "Chocolate com avelãs inteiras.", 366, 39.99, ["Chocolate", "Avelãs"])
        }
        return products.get(code, None)

class EasterApp:
    def __init__(self):
        self.factory = None

    def choose_factory(self, factory_name):
        if factory_name == "Nestle":
            self.factory = NestleFactory()
        elif factory_name == "Garoto":
            self.factory = GarotoFactory()
        elif factory_name == "Lacta":
            self.factory = LactaFactory()
        elif factory_name == "Hersheys":
            self.factory = HersheysFactory()
        elif factory_name == "Ferreiro":
            self.factory = FerreiroFactory()
        else:
            print("Fábrica não reconhecida.")

    def order_product(self, code):
        if self.factory:
            product = self.factory.create_product(code)
            if product:
                print(product.display_info())
            else:
                print("Produto não encontrado.")
        else:
            print("Por favor, selecione uma fábrica antes de fazer um pedido.")

if __name__ == "__main__":
    app = EasterApp()
    app.choose_factory("Nestle") 
    app.order_product(4)
