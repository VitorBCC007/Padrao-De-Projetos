from abc import ABC, abstractmethod

class EggProduct(ABC):
    @abstractmethod
    def display_info(self):
        pass

class NestleAlpino(EggProduct):
    def display_info(self):
        return "Ovo de Páscoa Alpino 337g da Nestle - Chocolate ao leite, recheio de trufa, decorado com pedaços de amêndoas e avelãs."

class NestleClassic(EggProduct):
    def display_info(self):
        return "Ovo de Páscoa Classic 185g da Nestle - Chocolate ao leite, casca lisa e brilhante, acompanha bombons sortidos."

class NestleKitKat(EggProduct):
    def display_info(self):
        return "Ovo de Páscoa Kit Kat 227g da Nestle - Chocolate ao leite, casca recheada com wafer Kit Kat, acompanha barras de Kit Kat."

class NestleBis(EggProduct):
    def display_info(self):
        return "Ovo de Páscoa Bis 250g da Nestle - Chocolate ao leite, recheio cremoso de creme de avelã, decorado com pedaços de chocolate Bis."

class GarotoCrocante(EggProduct):
    def display_info(self):
        return "Ovo de Páscoa Crocante 215g da Garoto - Chocolate ao leite, recheio crocante de castanha de caju."

class GarotoTalento(EggProduct):
    def display_info(self):
        return "Ovo de Páscoa Talento 350g da Garoto - Chocolate ao leite, recheio cremoso de trufa, acompanha barras de chocolate Talento."

class GarotoBaton(EggProduct):
    def display_info(self):
        return "Ovo de Páscoa Baton ao leite 172g da Garoto - Chocolate ao leite, casca fina, formato de bastão."

class GarotoCaribe(EggProduct):
    def display_info(self):
        return "Ovo de Páscoa Caribe 200g da Garoto - Chocolate ao leite, recheio cremoso de coco, decorado com flocos de coco."

class LactaALeite(EggProduct):
    def display_info(self):
        return "Ovo de Páscoa A Leite 170g da Lacta - Chocolate ao leite, casca com detalhes em chocolate branco."

class LactaOreo(EggProduct):
    def display_info(self):
        return "Ovo de Páscoa Oreo 257g da Lacta - Chocolate ao leite, recheio cremoso de biscoitos Oreo."

class LactaSonhoDeValsa(EggProduct):
    def display_info(self):
        return "Ovo de Páscoa Sonho de Valsa 277g da Lacta - Chocolate ao leite, recheio de bombons Sonho de Valsa."

class LactaOuroBranco(EggProduct):
    def display_info(self):
        return "Ovo de Páscoa Ouro Branco 240g da Lacta - Chocolate ao leite, recheio cremoso de chocolate branco, decorado com pedaços de chocolate Ouro Branco."

class Hersheys(EggProduct):
    def __init__(self, weight):
        self.weight = weight

    def display_info(self):
        return f"Ovo de Páscoa Hershey's {self.weight}g da Hershey's - Chocolate ao leite."

class FerreiroRocher(EggProduct):
    def __init__(self, weight):
        self.weight = weight

    def display_info(self):
        return f"Ovo de Páscoa Ferreiro Rocher {self.weight}g da Ferreiro - Chocolate com avelãs inteiras."

class EggFactory(ABC):
    @abstractmethod
    def create_product(self, code):
        pass

class NestleFactory(EggFactory):
    def create_product(self, code):
        if code == 1:
            return NestleAlpino()
        elif code == 2:
            return NestleClassic()
        elif code == 3:
            return NestleKitKat()
        elif code == 4:
            return NestleBis()
        else:
            return None

class GarotoFactory(EggFactory):
    def create_product(self, code):
        if code == 1:
            return GarotoCrocante()
        elif code == 2:
            return GarotoTalento()
        elif code == 3:
            return GarotoBaton()
        elif code == 4:
            return GarotoCaribe()
        else:
            return None

class LactaFactory(EggFactory):
    def create_product(self, code):
        if code == 1:
            return LactaALeite()
        elif code == 2:
            return LactaOreo()
        elif code == 3:
            return LactaSonhoDeValsa()
        elif code == 4:
            return LactaOuroBranco()
        else:
            return None

class HersheysFactory(EggFactory):
    def create_product(self, code):
        if code == 1:
            return Hersheys(weight=137)
        elif code == 2:
            return Hersheys(weight=225)
        elif code == 3:
            return Hersheys(weight=336)
        else:
            return None

class FerreiroFactory(EggFactory):
    def create_product(self, code):
        if code == 1:
            return FerreiroRocher(weight=137)
        elif code == 2:
            return FerreiroRocher(weight=255)
        elif code == 3:
            return FerreiroRocher(weight=366)
        else:
            return None

class EasterApp:
    def __init__(self):
        self.factory = None

    def choose_factory(self, factory_name):
        if factory_name == "Nestle":
            self.factory = NestleFactory()
        elif factory_name == "Garoto":
            self.factory = GarotoFactory()
        elif factory_name == "Lacta":
            self.factory = LactaFactory()
        elif factory_name == "Hersheys":
            self.factory = HersheysFactory()
        elif factory_name == "Ferreiro":
            self.factory = FerreiroFactory()
        else:
            print("Fábrica não reconhecida.")

    def order_product(self, code):
        if self.factory:
            product = self.factory.create_product(code)
            if product:
                print(product.display_info())
            else:
                print("Produto não encontrado.")
        else:
            print("Por favor, selecione uma fábrica antes de fazer um pedido.")

# NESTLE , GAROTO, LACTA, HERSHEYS, FERREIRO (app.choose_factory( "MUDE O NOME PARA A FABRICA" ) 
# app.order_product(4)   <<< MUDE O NÚMERO DE 1 A 4 PARA TROCAR O CHOCOLATE
if __name__ == "__main__":
    app = EasterApp()
    app.choose_factory("Nestle") 
    app.order_product(4)  

