from abc import ABC, abstractmethod

class Iogurte(ABC):
    @abstractmethod
    def exibirinfoIorgute(self):
        pass

class Bebida(ABC):
    @abstractmethod
    def exibirinfoBebida(self):
        pass

class IogurteMorango(Iogurte):
    def exibirinfoIorgute(self):
        return "Iogurte de Morango"

class IogurteLimao(Iogurte):
    def exibirinfoIorgute(self):
        return "Iogurte de Limão"

class IogurteCoco(Iogurte):
    def exibirinfoIorgute(self):
        return "Iogurte de Coco"
    
class IogurteFramboesa(Iogurte):
    def exibirinfoIorgute(self):
        return "Iogurte de Framboesa"


class SucoMorango(Bebida):
    def exibirinfoBebida(self):
        return "Suco de Morango"

class SucoLimao(Bebida):
    def exibirinfoBebida(self):
        return "Suco de Limão"


class FabricaDanone(ABC):
    @abstractmethod
    def exibirinfoIorgute(self) -> Iogurte:
        pass

    @abstractmethod
    def exibirinfoBebida(self) -> Bebida:
        pass

class FabricaDanoneA(FabricaDanone):
    def exibirinfoIorgute(self) -> Iogurte:
        return IogurteMorango()

    def exibirinfoBebida(self) -> Bebida:
        return SucoMorango()

    def exibirinfoIorguteExtra(self) -> Iogurte:
        return IogurteFramboesa()

class FabricaDanoneB(FabricaDanone):
    def exibirinfoIorgute(self) -> Iogurte:
        return IogurteLimao()

    def exibirinfoBebida(self) -> Bebida:
        return SucoLimao()

    def exibirinfoIorguteExtra(self) -> Iogurte:
        return IogurteCoco()

def testar_fabrica(fabrica: FabricaDanone):
    iogurte = fabrica.exibirinfoIorgute()
    bebida = fabrica.exibirinfoBebida()
    iogurte_extra = fabrica.exibirinfoIorguteExtra()
    print("Iogurte:", iogurte.exibirinfoIorgute())
    print("Bebida:", bebida.exibirinfoBebida())
    print("Iogurte Extra:", iogurte_extra.exibirinfoIorgute())

print("Fabrica DanoneA:")
testar_fabrica(FabricaDanoneA())

print("\nFabrica DanoneB:")
testar_fabrica(FabricaDanoneB())
