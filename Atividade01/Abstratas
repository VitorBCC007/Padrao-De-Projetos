from abc import ABC, abstractmethod

class Aluno(ABC):
    def __init__(self, nome):
        self.nome = nome

    @abstractmethod
    def obter_nome(self):
        pass

class AlunoImpl(Aluno):
    def obter_nome(self):
        return self.nome

class Disciplina(ABC):
    def __init__(self):
        self.alunos = []

    @abstractmethod
    def matricular(self, aluno):
        pass
    
    @abstractmethod
    def listar_alunos(self):
        pass

class DisciplinaMatematica(Disciplina):
    def matricular(self, aluno):
        self.alunos.append(aluno)

    def listar_alunos(self):
        for aluno in self.alunos:
            print(aluno.obter_nome())

class DisciplinaFisica(Disciplina):
    def matricular(self, aluno):
        self.alunos.append(aluno)

    def listar_alunos(self):
        for aluno in self.alunos:
            print(aluno.obter_nome())

aluno1 = AlunoImpl("Jo√£o")
aluno2 = AlunoImpl("Vitor")

matematica = DisciplinaMatematica()
matematica.matricular(aluno1)
matematica.matricular(aluno2)
print("Matriculados em PP:")
matematica.listar_alunos()

fisica = DisciplinaFisica()
fisica.matricular(aluno1)
fisica.matricular(aluno2)
print("\nMatriculados em POO:")
fisica.listar_alunos()
